--autofarm
getgenv().autofarmtest = false
getgenv().autofarmgems = false
getgenv().autofarmgemsall = false
--Teleport
getgenv().teleportworlds = false
--Hatching
getgenv().autohatch1 = false
getgenv().autohatch3 = false
getgenv().autorankup = false
getgenv().autocraftall = false
getgenv().autoequipbest = false
--Upgrades
getgenv().upgrade1 = false
getgenv().upgrade3 = false
getgenv().upgrade5 = false
getgenv().upgrade6 = false
getgenv().upgrade7 = false
--misc
getgenv().autoclaimchest = false
getgenv().autoclaimgchest = false
getgenv().autoclaimach = false
getgenv().autoclaimspin = false

local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local selectedgui
local GuiTable = {"Achievements", "RankShop", "SpinWheel","UpgradeShop","Index",}

local selectedfarmethod
local FarmMethodTable = {"Tween", "Normal(Broken)"}

local selectedworld 
local Areas = workspace.PortalReceivers:GetChildren()
local AreasTable = {}
for i,v in pairs(Areas)do
    table.insert(AreasTable, v.Name)
end

local autofarmSpeed = 0.3 
local selectedfarmarea
local FarmAreas = workspace.SpawnZones:GetChildren()
local FarmAreasTable = {}
for i,v in pairs(FarmAreas) do
    table.insert(FarmAreasTable, v.Name)
end

local selectedegg1
local selectedegg2
local Eggs = workspace.Eggs:GetChildren()
local EggTable = {}
for i,v in pairs(Eggs) do
    table.insert(EggTable, v.Name)
end

local Craft = game:GetService("Players").LocalPlayer.Pets:GetChildren()
local CraftTable = {}
for i,v in pairs (Craft) do
    table.insert(CraftTable, v.Name)
end


local Players = game:GetService("Players")
local PathfindingService = game:GetService("PathfindingService")

local lp = Players.LocalPlayer

function Normal(v)
    if lp.Character and lp.Character:FindFirstChild('HumanoidRootPart') then
        -- Create new CFrame from input position v
        local cf = CFrame.new(v)
        
        -- Find the path from the player's current position to the target CFrame
        local path = PathfindingService:CreatePath({
            AgentRadius = 2,
            AgentHeight = 5,
            AgentCanJump = true,
            StartPosition = lp.Character.HumanoidRootPart.Position,
            EndPosition = cf.p
        })
        path:ComputeAsync()
        
        -- Move the player along the path by setting their primary part's CFrame to each waypoint's CFrame
        local waypoints = path:GetWaypoints()
        for _, waypoint in ipairs(waypoints) do
            lp.Character:SetPrimaryPartCFrame(waypoint.CFrame)
            wait(0.1)
        end
    end
end



local Players = game:GetService("Players")
local tween_s = game:GetService('TweenService')
local tween_info = TweenInfo.new(0.1, Enum.EasingStyle.Linear)

local lp = Players.LocalPlayer


function Tween(v)
    if lp.Character and lp.Character:FindFirstChild('HumanoidRootPart') then
        local cf = CFrame.new(v)
        local a = tween_s:Create(lp.Character.HumanoidRootPart, tween_info, {CFrame = cf})
        a:Play()
    end
end

function getcurrentPlayerPOS()
    local plyr = game.Players.LocalPlayer
    if plyr.Character then
        return plyr.Character.HumanoidRootPart
    end
    return false
end

function teleporto(placeCframe)
    local plyr = game.Players.LocalPlayer
    if plyr.Character then
        plyr.Character.HumanoidRootPart.CFrame = placeCframe
    end
end

function teleportworld(world)
    spawn(function()
        local args = {
            [1] = world
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Teleport"):InvokeServer(unpack(args))
end)
end

local function autofarmTest(world, farmethod)
    spawn(function()
        while getgenv().autofarmtest == true do
            local args = {
                [1] = world
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Teleport"):InvokeServer(unpack(args))
            wait(0)
            
            while getgenv().autofarmtest == true do
                local spawns = workspace.SpawnZones[selectedfarmarea]:GetChildren()
                for _, spawn in ipairs(spawns) do
                    if spawn:FindFirstChild("MainPart") then
                        farmethod(spawn.MainPart.CFrame.Position)
                        game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
                        wait(autofarmSpeed)
                        if not getgenv().autofarmtest then
                            break
                        end
                    end
                end
            end
        end
    end)
end 
local function autofarmGems(world)
    spawn(function()
        while getgenv().autofarmgems == true do
            local args = {
                [1] = world
            }
            
            game:GetService("ReplicatedStorage")
                :WaitForChild("Remotes")
                :WaitForChild("Teleport")
                :InvokeServer(unpack(args))
            
            -- Search for Gem parts in Spawn Zone
            local gemFound = false
            repeat
                for _, child in ipairs(workspace.SpawnZones[selectedfarmarea]:GetChildren()) do
                    if child.Name == "Gem" then
                        Tween(child.MainPart.CFrame.Position)
                        game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
                        wait(autofarmSpeed)
                        gemFound = true
                    end
                end
                if not gemFound then
                    wait(1)
                end
            until gemFound == true or getgenv().autofarmgems == false
        end
    end)
end
local function autofarmGemsAll()
    while  autofarmgemsall == true do
        if not getgenv().autofarmgemsall then
            break
        end
        
        -- Create a table of the spawn zones in the order we want to search them
        local spawnZones = {"Spawn", "Forest", "Frosty", "Mine", "Aqua", "Steampunk","Sakura",}
        
        -- Loop through each spawn zone in the table
        for i = 1, #spawnZones do
            -- Teleport to the current spawn zone
            local args = {[1] = spawnZones[i]}
            game:GetService("ReplicatedStorage").Remotes.Teleport:InvokeServer(unpack(args))
            
            -- Search for gems in the current spawn zone
            local gemFound = true  -- Assume we will find at least one gem
            
            while gemFound == true do
                gemFound = false  -- Reset flag
                
                -- Loop through all children of the current spawn zone with the same name as the spawn zone
                for _, child in ipairs(workspace.SpawnZones[spawnZones[i]]:GetChildren()) do
                    if child.Name == "Gem" then
                        Tween(child.MainPart.CFrame.Position)
                        game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
                        wait(autofarmSpeed)
                        gemFound = true
                        break
                    end
                end
                
                -- Check if autofarmgemsall has been set to false
                if not getgenv().autofarmgemsall then
                    break
                end
            end
            
            -- If there are no more gems in the current spawn zone, move on to the next one
            if i < #spawnZones then
                local args = {[1] = spawnZones[i+1]}
                game:GetService("ReplicatedStorage").Remotes.Teleport:InvokeServer(unpack(args))
            end
            
            -- Check if autofarmgemsall has been set to false
            if not getgenv().autofarmgemsall then
                break
            end
        end
        
        -- Check if autofarmgemsall has been set to false
        if not getgenv().autofarmgemsall then
            break
        end
    end
end







local function autoHatch1(egg, amount, world)
    spawn(function()
            while getgenv().autohatch1 == true do
                local args = {
                    [1] = egg,
                    [2] = amount
                }
                
                game:GetService("ReplicatedStorage").Remotes.EggOpened:InvokeServer(unpack(args))
                wait(0)
                
                if getgenv().autohatch1 == false then
                    break
                end
            end
    end)
end

local function autoHatch3(egg, amount)
    spawn(function()
            while getgenv().autohatch3 == true do
                local args = {
                    [1] = egg,
                    [2] = amount
                }
                
                game:GetService("ReplicatedStorage").Remotes.EggOpened:InvokeServer(unpack(args))
                wait(0)
                
                if getgenv().autohatch3 == false then
                    break
                end
            end
    end)
end

local function autoRankUp()
    spawn(function()
        while getgenv().autorankup == true do
            for i = 1, 99 do
                game:GetService("ReplicatedStorage").Remotes.BuyRank:FireServer(i)
                wait(0)
                
                if getgenv().autorankup == false then
                    break
                end
            end
        end
    end)
end

local function autoCraftAll()
    spawn(function()
        for i, petid in ipairs(CraftTable) do
            local args = {
                [1] = "Craft",
                [2] = petid
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PetAction"):InvokeServer(unpack(args))
        
            wait(0)
            
            if getgenv().autocraftall == false then
                break
            end
        end
    end)
end

local function autoEquipBest()
    spawn(function()
        while getgenv().autoequipbest == true do
            for i, petid in ipairs(CraftTable) do
                local args = {
                    [1] = "Equip",
                    [2] = petid
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PetAction"):InvokeServer(unpack(args))
                
            
                wait(0)
                
                if getgenv().autocraftall == false then
                    break
                end
            end
        end
    end)
end

local function Upgrade1(upgrade_1)
    spawn(function()
        while getgenv().upgrade1 == true do
                local args = {
                    [1] = upgrade_1
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Upgrades"):FireServer(unpack(args))
                wait(0)
                
                if getgenv().upgrade1 == false then
                    break
            end
        end
    end)
end

local function Upgrade2(upgrade_2)
    spawn(function()
                local args = {
                    [1] = upgrade_2
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Upgrades"):FireServer(unpack(args))
                wait(0)
    end)
end

local function Upgrade3(upgrade_3)
    spawn(function()
        while getgenv().upgrade3 == true do
                local args = {
                    [1] = upgrade_3
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Upgrades"):FireServer(unpack(args))
                wait(0)
                
                if getgenv().upgrade3 == false then
                    break
            end
        end
    end)
end

local function Upgrade4(upgrade_4)
    spawn(function()
                local args = {
                    [1] = upgrade_4
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Upgrades"):FireServer(unpack(args))
                wait(0)
    end)
end

local function Upgrade5(upgrade_5)
    spawn(function()
        while getgenv().upgrade5 == true do
                local args = {
                    [1] = upgrade_5
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Upgrades"):FireServer(unpack(args))
                wait(0)
                
                if getgenv().upgrade5 == false then
                    break
            end
        end
    end)
end

local function Upgrade6(upgrade_6)
    spawn(function()
        while getgenv().upgrade6 == true do
                local args = {
                    [1] = upgrade_6
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Upgrades"):FireServer(unpack(args))
                wait(0)
                
                if getgenv().upgrade6 == false then
                    break
            end
        end
    end)
end

local function Upgrade7(upgrade_7)
    spawn(function()
        while getgenv().upgrade7 == true do
                local args = {
                    [1] = upgrade_7
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Upgrades"):FireServer(unpack(args))
                wait(0)
                
                if getgenv().upgrade7 == false then
                    break
            end
        end
    end)
end

local function Upgrade8(upgrade_8)
    spawn(function()
                local args = {
                    [1] = upgrade_8
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Upgrades"):FireServer(unpack(args))
                wait(0)
    end)
end

local function autoClaimChest()
    spawn(function()
        while getgenv().autoclaimchest == true do
        local args = {
            [1] = "Daily"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ClaimChest"):FireServer(unpack(args))
        wait(0)
        if getgenv().autoclaimchest == false then
            break
        end
    end
end)
end

local function autoClaimGChest()
    spawn(function()
        while getgenv().autoclaimgchest == true do
        local args = {
            [1] = "Group"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ClaimChest"):FireServer(unpack(args))
        wait(0)
         if getgenv().autoclaimgchest == false then
            break
        end
    end
end)
end

local function autoClaimAch()
    spawn(function()
        while getgenv().autoclaimach == true do
            local args = {
                [1] = {
                    ["Prices"] = {
                        [1] = 250,
                        [2] = 750,
                        [3] = 2500,
                        [4] = 10000,
                        [5] = 75000,
                        [6] = 250000,
                        [7] = 500000,
                        [8] = 1000000,
                        [9] = 2000000,
                        [10] = "Max"
                    },
                    ["Title"] = "Collect %s Stars",
                    ["StatName"] = "Achievement1",
                    ["RequiredStat"] = "StarsCollected",
                    ["ProgressText"] = "x Star Multiplier",
                    ["ShorteningType"] = "en",
                    ["Reward"] = {
                        [1] = 0.2,
                        [2] = 0.4,
                        [3] = 0.5,
                        [4] = 0.7,
                        [5] = 0.8,
                        [6] = 0.9,
                        [7] = 1,
                        [8] = 1.2,
                        [9] = 1.4,
                        [10] = 1.5
                    }
                },
                [2] = 5
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CompleteAchievement"):FireServer(unpack(args))
            
        wait(0)
         if getgenv().autoclaimach == false then
            break
        end
    end
end)
end

local function autoClaimSpin()
    spawn(function()
        while getgenv().autoclaimspin == true do
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Spin"):InvokeServer()
        wait(0)
         if getgenv().autoclaimspin == false then
            break
        end
    end
end)
end

local function openGui(chosengui)
    spawn(function()
        while wait() do
            local players = game:GetService("Players")
            local localPlayer = players.LocalPlayer
            
            -- Wait for the player's PlayerGui to load
            repeat
                wait(0)
            until localPlayer.PlayerGui and localPlayer.PlayerGui:FindFirstChild("Rank Simulator X")
            
            -- Get the Achievements frame of the Rank Simulator X GUI
            local achievementsFrame = localPlayer.PlayerGui["Rank Simulator X"].HUD.Frames[chosengui]
            
            -- Set the Visible property of the Achievements frame to true to make it active
            achievementsFrame.Visible = true
        break 
    end  

    end)
end

local Window = OrionLib:MakeWindow({Name = "[🚨UPDATE!🚨] Rank Simulator X  By Killa#2836", HidePremium = false, SaveConfig = true, ConfigFolder = "Killa Hub"})

--[[
Name = <string> - The name of the UI.
HidePremium = <bool> - Whether or not the user details shows Premium status or not.
SaveConfig = <bool> - Toggles the config saving in the UI.
ConfigFolder = <string> - The name of the folder where the configs are saved.
IntroEnabled = <bool> - Whether or not to show the intro animation.
IntroText = <string> - Text to show in the intro animation.
IntroIcon = <string> - URL to the image you want to use in the intro animation.
Icon = <string> - URL to the image you want displayed on the window.
CloseCallback = <function> - Function to execute when the window is closed.
]]

local Tab = Window:MakeTab({
	Name = "Farming",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section = Tab:AddSection({
	Name = "Normal AutoFarms"
})
Tab:AddDropdown({
	Name = "Select World",
	Default = "Sakura",
	Options = FarmAreasTable,
	Callback = function(value)
        selectedfarmarea = value
		print(value)
	end    
})

Tab:AddDropdown({
	Name = "AutoFarm Method",
	Default = "Tween",
	Options = FarmMethodTable,
	Callback = function(value)
        selectedfarmethod = value
		print(value)
	end    
})

Tab:AddSlider({
	Name = "AutoFarm Speed",
	Min = 0.1,
	Max = 1,
	Default = 0.2,
	Color = Color3.fromRGB(255,255,255),
	Increment = 0.1,
	ValueName = "Farm Speed",
	Callback = function(value)
        autofarmSpeed = value
		print(value)
	end    
})

Tab:AddToggle({
	Name = "AutoFarm Selected",
	Default = false,
	Callback = function(bool)
		getgenv().autofarmtest = bool
    print("Auto farm is", bool)
    if selectedfarmethod == "Normal" and bool then
     autofarmTest(selectedfarmarea, Normal)
    else if selectedfarmethod == "Tween" and bool then
        autofarmTest(selectedfarmarea, Tween)
    end
    end
	end    
})

Tab:AddToggle({
	Name = "AutoFarm Gems Selected",
	Default = false,
	Callback = function(bool)
        getgenv().autofarmgems = bool
        print("Auto farm is", bool)
        if bool then 
         autofarmGems(selectedfarmarea)
    end
	end    
})

local Section = Tab:AddSection({
	Name = "OP AutoFarms"
})
Tab:AddToggle({
	Name = "AutoFarm All Gems(⚠️ Need all worlds)",
	Default = false,
	Callback = function(bool)
        getgenv().autofarmgemsall = bool
    print("Auto farm All Gem", bool)
    if bool then 
     autofarmGemsAll()
    end
	end    
})

local Section = Tab:AddSection({
	Name = "Misc"
})
Tab:AddToggle({
	Name = "Auto RankUp",
	Default = false,
	Callback = function(bool)
        getgenv().autorankup = bool
        print("Auto RankUp is", bool)
        if bool then 
         autoRankUp()
    end
	end    
})

local Tab = Window:MakeTab({
	Name = "Hatching",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section = Tab:AddSection({
	Name = "Hatching"
})
Tab:AddDropdown({
	Name = "Select Egg",
	Default = "Sakura",
	Options = EggTable,
	Callback = function(value)
    selectedegg1 = value
    selectedegg2 = value
    print(value)
	end    
})
Tab:AddToggle({
	Name = "Auto Hatch(1)",
	Default = false,
	Callback = function(bool)
        getgenv().autohatch1 = bool
        print("Auto Hatch(1) is", bool)
        if bool then 
         autoHatch1(selectedegg1, 1, selectedegg1)
    end
	end    
})
Tab:AddToggle({
	Name = "Auto Hatch(3)(⚠️ Join Game Group)",
	Default = false,
	Callback = function(bool)
        getgenv().autohatch3 = bool
    print("Auto Hatch(3) is", bool)
    if bool then 
     autoHatch3(selectedegg2, 3)
    end
	end    
})

local Section = Tab:AddSection({
	Name = "Misc - Working on it :)"
})

local Tab = Window:MakeTab({
	Name = "Upgrades",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section = Tab:AddSection({
	Name = "One Time Upgrades"
})
Tab:AddButton({
	Name = "More Pet Luck",
	Callback = function()
        Upgrade2(2)
  	end    
})
Tab:AddButton({
	Name = "Extra Pet Equip(50k Gems)",
	Callback = function()
        Upgrade4(4)
  	end    
})
Tab:AddButton({
	Name = "Auto Craft(500k Gems)",
	Callback = function()
        Upgrade8(8)
  	end    
})

local Section = Tab:AddSection({
	Name = "Upgrades"
})
Tab:AddToggle({
	Name = "Get More Stars",
	Default = false,
	Callback = function(bool)
        getgenv().upgrade1 = bool
    print("Get More Stars", bool)
    if bool then 
     Upgrade1(1)
    end
	end    
})
Tab:AddToggle({
	Name = "Get More Gems",
	Default = false,
	Callback = function(bool)
        getgenv().upgrade3 = bool
        print("Get More Gems", bool)
        if bool then 
         Upgrade3(3)
    end
	end    
})
Tab:AddToggle({
	Name = "HatchSpeed",
	Default = false,
	Callback = function(bool)
        getgenv().upgrade5 = bool
    print("HatchSpeed", bool)
    if bool then 
     Upgrade5(5)
    end
	end    
})
Tab:AddToggle({
	Name = "WalkSpeed",
	Default = false,
	Callback = function(bool)
        getgenv().upgrade6 = bool
    print("WalkSpeed", bool)
    if bool then 
     Upgrade6(6)
    end
	end    
})
Tab:AddToggle({
	Name = "MaxCombo",
	Default = false,
	Callback = function(bool)
        getgenv().upgrade7 = bool
    print("MaxCombo", bool)
    if bool then 
     Upgrade7(7)
    end
	end    
})

local Tab = Window:MakeTab({
	Name = "Teleport",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

Tab:AddDropdown({
	Name = "Select World",
	Default = "Spawn",
	Options = AreasTable,
	Callback = function(value)
        selectedworld = value
    print(value)
	end    
})
Tab:AddButton({
	Name = "Teleport Selected World",
	Callback = function()
        teleportworld(selectedworld)
  	end    
})

local Tab = Window:MakeTab({
	Name = "Open GUI",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

Tab:AddDropdown({
	Name = "Select GUI",
	Default = "Achievements",
	Options = GuiTable,
	Callback = function(value)
        selectedgui = value
    print(value)
	end    
})

Tab:AddButton({
	Name = "Open GUI",
	Callback = function()
        openGui(selectedgui)
  	end    
})

local Tab = Window:MakeTab({
	Name = "Misc",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

Tab:AddToggle({
	Name = "AutoClaimDailyChest",
	Default = false,
	Callback = function(bool)
        getgenv().autoclaimchest = bool
        print("AutoClaimDailyChest", bool)
        if bool then 
        autoClaimChest()
    end
	end    
})
Tab:AddToggle({
	Name = "AutoClaimGroupChest",
	Default = false,
	Callback = function(bool)
        getgenv().autoclaimgchest = bool
    print("AutoClaimGroupChest", bool)
    if bool then 
    autoClaimGChest()
    end
	end    
})
Tab:AddToggle({
	Name = "AutoSpin",
	Default = false,
	Callback = function(bool)
        getgenv().autoclaimspin = bool
    print("AutoSpin", bool)
    if bool then 
    autoClaimSpin()
    end
	end    
})
Tab:AddToggle({
	Name = "AutoClaimAchievments",
	Default = false,
	Callback = function(bool)
        getgenv().autoclaimach = bool
    print("AutoClaimAchievments", bool)
    if bool then 
    autoClaimAch()
    end
	end    
})


OrionLib:Init()


















